{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["cityList","api","App","useState","query","setQuery","weather","setWeather","dropdownVisible","setDropdownVisible","requestWeather","city","fetch","then","res","json","result","console","log","Dropdown","cities","filter","cityMatched","toLowerCase","match","map","key","onClick","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","length","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Number","Math","round","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oPAGeA,G,MAHI,CAAC,SAAU,WAAY,SAAU,QAAS,SAAU,QAAS,WAAY,QAAS,OAC5F,OAAQ,aAAc,QAAS,aAAc,UAAW,UCI3DC,EACC,mCADDA,EAEG,2CA+EMC,MA7Ef,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAEmBF,mBAAS,IAF5B,mBAEJG,EAFI,KAEKC,EAFL,OAGmCJ,oBAAS,GAH5C,mBAGJK,EAHI,KAGaC,EAHb,KAKX,SAASC,EAAeC,GACpBC,MAAM,GAAD,OAAIX,EAAJ,qBAAyBU,EAAzB,kBAAuCV,IACvCY,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFT,EAAWS,GACXX,EAAS,IACTY,QAAQC,IAAIF,MAIxB,IAwBMG,EAAW,WACb,IAAMnB,EAAYoB,EAAOC,QAAO,SAAAC,GAAW,OAAIA,EAAYC,cAAcC,MAAMpB,EAAMmB,kBAAgBE,KAAI,SAACH,EAAaI,GACnH,OAAO,wBAAIC,QAAS,kBARNhB,EAQwBW,EAP1Cb,GAAmB,GACnBJ,EAASM,QACTD,EAAeC,GAHE,IAACA,GAQsCiB,UAAU,cAAcF,IAAKA,GAAMJ,MAE3F,OACuB,IAAlBd,EAAyB,yBAAKoB,UAAU,YAAY5B,GAAkB,IAG/E,OACA,yBAAK4B,UAAmC,oBAAhBtB,EAAQuB,MAjBpBvB,EAAQuB,KAAKC,KAAO,OAAU,GAAK,WAiBkB,OAC5D,8BACM,yBAAKF,UAAU,cACZ,2BACIG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAI7B,EAAS6B,EAAEC,OAAOC,QACjCA,MAAOhC,EACPiC,WA1CH,SAAAC,GACI,UAAZA,EAAIZ,KACJhB,EAAe4B,EAAIH,OAAOC,UAyChBhC,EAAMmC,OAAS,EAAI,kBAACpB,EAAD,MAAc,IAEhB,oBAAhBb,EAAQuB,KAChB,6BACG,yBAAKD,UAAU,gBACX,yBAAKA,UAAU,YAAYtB,EAAQkC,KAAnC,KAA2ClC,EAAQmC,IAAIC,SACvD,yBAAKd,UAAU,QA3CZ,SAACe,GACjB,IAEIC,EADO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EAJS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAIzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cACb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAoCEE,CAAY,IAAIC,QAE3C,yBAAKzB,UAAU,eACf,yBAAKA,UAAU,QAAQ0B,OAAOC,KAAKC,MAAMlD,EAAQuB,KAAKC,KAAO,SAA7D,SACA,yBAAKF,UAAU,WAAWtB,EAAQA,QAAQ,GAAGuB,QAG5C,wBAAID,UAAU,UAAd,mCCpEE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpC,MACvB,2DCZNqC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.cf3c1114.chunk.js","sourcesContent":["  const cityList = ['London', 'New York', 'Moscow', 'Paris', 'Madrid', 'Sofia', 'Istanbul', 'Tokyo', 'Rome',\r\n         'Bern', 'California', 'Miami', 'Svilengrad', 'Plovdiv', 'Varna'];\r\n\r\nexport default cityList;","import React, { useState} from 'react';\n\nimport './App.css';\n\nimport cities from \"./data\";\nconst api = {\n  key: \"773eb64fa4a5cec966b88f5a806ff429\",\n  base:  \"https://api.openweathermap.org/data/2.5/\"\n};\nfunction App() {\n    const [query, setQuery] = useState('');\n    const [weather, setWeather] = useState({});\n    const [dropdownVisible, setDropdownVisible] = useState(true);\n\n    function requestWeather(city) {\n        fetch(`${api.base}weather?q=${city}&appid=${api.key}`)\n            .then(res => res.json())\n            .then(result => {\n                setWeather(result);\n                setQuery('');\n                console.log(result)\n            })\n    }\n\n    const search = evt => {\n       if (evt.key === \"Enter\") {\n           requestWeather(evt.target.value);\n       }\n\n    };\n    const dateBuilder = (d) => {\n        let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n        let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n        let day = days[d.getDay()];\n        let date = d.getDate();\n        let month = months[d.getMonth()];\n        let year = d.getFullYear();\n        return `${day} ${date} ${month} ${year}`\n    };\n    const isHot = () => {\n        return (weather.main.temp - 273.15) > 16 ? 'app-warm' : 'app';\n    };\n    const onCitySelect = (city) => {\n        setDropdownVisible(false);\n        setQuery(city);\n        requestWeather(city);\n\n    };\n    const Dropdown = () => {\n        const cityList  = cities.filter(cityMatched => cityMatched.toLowerCase().match(query.toLowerCase())).map((cityMatched, key) => {\n            return <li onClick={() =>onCitySelect(cityMatched)} className=\"cities-list\" key={key}>{cityMatched}</li>\n        });\n        return (\n            (dropdownVisible===true ? <div className=\"dropdown\">{cityList}</div> : '')\n        )\n    };\n    return (\n    <div className={(typeof weather.main != \"undefined\") ? isHot() : 'app'}>\n         <main>\n               <div className=\"search-box\">\n                  <input\n                      type=\"text\"\n                      className=\"search-bar\"\n                      placeholder=\"Search...\"\n                      onChange={e => setQuery(e.target.value)}\n                      value={query}\n                      onKeyPress={search}/>\n                   {(query.length > 0 ? <Dropdown/> : '')}\n               </div>\n             {(typeof weather.main != 'undefined') ? (\n              <div>\n                 <div className=\"location-box\">\n                     <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                     <div className=\"date\">{dateBuilder(new Date())}</div>\n                 </div>\n                 <div className=\"weather-box\">\n                 <div className=\"temp\">{Number(Math.round(weather.main.temp - 273.15))}Â°C</div>\n                 <div className=\"weather\">{weather.weather[0].main}</div>\n                 </div>\n              </div>\n             ) : (<h1 className=\"slogan\">Welcome to my weather app :)</h1>)}\n         </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}